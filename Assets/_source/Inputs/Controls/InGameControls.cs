//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/_source/Inputs/Controls/InGameControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game.Inputs
{
    public partial class @InGameControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InGameControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InGameControls"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""5a88c9a7-9f2c-4ca6-b814-924235e54238"",
            ""actions"": [
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""52858b46-21fb-4d0f-9709-26687a25a0b1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointerPress"",
                    ""type"": ""Button"",
                    ""id"": ""9d02c47d-48fa-48eb-96a2-de429c1daee1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MenuOpen"",
                    ""type"": ""Button"",
                    ""id"": ""54a2a11d-0736-4b1f-ad98-b1422b21b8b9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b46d8e26-846b-4117-8014-dd5f9b59a512"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9281cb49-4bca-4815-8620-66c434180770"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed5e87e5-f2ef-4ba2-a63c-93a98278a71b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuOpen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Default
            m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
            m_Default_PointerPosition = m_Default.FindAction("PointerPosition", throwIfNotFound: true);
            m_Default_PointerPress = m_Default.FindAction("PointerPress", throwIfNotFound: true);
            m_Default_MenuOpen = m_Default.FindAction("MenuOpen", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Default
        private readonly InputActionMap m_Default;
        private List<IDefaultActions> m_DefaultActionsCallbackInterfaces = new List<IDefaultActions>();
        private readonly InputAction m_Default_PointerPosition;
        private readonly InputAction m_Default_PointerPress;
        private readonly InputAction m_Default_MenuOpen;
        public struct DefaultActions
        {
            private @InGameControls m_Wrapper;
            public DefaultActions(@InGameControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @PointerPosition => m_Wrapper.m_Default_PointerPosition;
            public InputAction @PointerPress => m_Wrapper.m_Default_PointerPress;
            public InputAction @MenuOpen => m_Wrapper.m_Default_MenuOpen;
            public InputActionMap Get() { return m_Wrapper.m_Default; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
            public void AddCallbacks(IDefaultActions instance)
            {
                if (instance == null || m_Wrapper.m_DefaultActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_DefaultActionsCallbackInterfaces.Add(instance);
                @PointerPosition.started += instance.OnPointerPosition;
                @PointerPosition.performed += instance.OnPointerPosition;
                @PointerPosition.canceled += instance.OnPointerPosition;
                @PointerPress.started += instance.OnPointerPress;
                @PointerPress.performed += instance.OnPointerPress;
                @PointerPress.canceled += instance.OnPointerPress;
                @MenuOpen.started += instance.OnMenuOpen;
                @MenuOpen.performed += instance.OnMenuOpen;
                @MenuOpen.canceled += instance.OnMenuOpen;
            }

            private void UnregisterCallbacks(IDefaultActions instance)
            {
                @PointerPosition.started -= instance.OnPointerPosition;
                @PointerPosition.performed -= instance.OnPointerPosition;
                @PointerPosition.canceled -= instance.OnPointerPosition;
                @PointerPress.started -= instance.OnPointerPress;
                @PointerPress.performed -= instance.OnPointerPress;
                @PointerPress.canceled -= instance.OnPointerPress;
                @MenuOpen.started -= instance.OnMenuOpen;
                @MenuOpen.performed -= instance.OnMenuOpen;
                @MenuOpen.canceled -= instance.OnMenuOpen;
            }

            public void RemoveCallbacks(IDefaultActions instance)
            {
                if (m_Wrapper.m_DefaultActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IDefaultActions instance)
            {
                foreach (var item in m_Wrapper.m_DefaultActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_DefaultActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public DefaultActions @Default => new DefaultActions(this);
        public interface IDefaultActions
        {
            void OnPointerPosition(InputAction.CallbackContext context);
            void OnPointerPress(InputAction.CallbackContext context);
            void OnMenuOpen(InputAction.CallbackContext context);
        }
    }
}
